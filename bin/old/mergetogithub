#!/bin/bash -x

GITHUB_USERNAME=a74nh
# GITHUB_REPO=$HOME/graal/graal_a74nh
USAGE="cd gerritrepo; $0 branch"

set -eu

REPO=$(cd $PWD && git rev-parse --show-toplevel)
GITHUB_REPO=${REPO}_${GITHUB_USERNAME}

BRANCH_TO_PUSH=${1:?$USAGE}

#Find name of current branch
# BRANCH_TO_PUSH=$(git rev-parse --abbrev-ref HEAD)

#Move to the github repo. Update master to latest upstream.
cd $GITHUB_REPO
git checkout master
git fetch gerrit
git pull --rebase upstream master
git push -f origin master

#Either create a new branch tracked from work repo.
#Or reset the tracked branch to latest head.
set +eu
git show-ref --verify --quiet refs/heads/$BRANCH_TO_PUSH
if [ $? -eq 0 ]
then
  set -eu
  git checkout $BRANCH_TO_PUSH
  git reset --hard gerrit/$BRANCH_TO_PUSH
else
  set -eu
  git checkout --track gerrit/$BRANCH_TO_PUSH
fi

rewrite_commit_date () {
    local commit="$1" date_timestamp="${2:-}"
    local date temp_branch="temp-rebasing-branch"
    local BRANCH_TO_PUSH="$(git rev-parse --abbrev-ref HEAD)"

    if [[ -z "$date_timestamp" ]]; then
        date="$(date -R)"
    else
        date="$(date -R --date "@$date_timestamp")"
    fi

    git checkout -b "$temp_branch" "$commit"
    GIT_COMMITTER_DATE="$date" git commit --amend --date "$date"
    git checkout "$BRANCH_TO_PUSH"
    git rebase "$commit" --onto "$temp_branch"
    git branch -d "$temp_branch"
    GIT_COMMITTER_DATE=
}

#Rebase to latest head
git rebase master

#Reset dates
for x in $(git rev-list HEAD...master); do rewrite_commit_date $x; done

#And push upstream
git push -f origin $BRANCH_TO_PUSH

